A) Requêtes

1) SELECT nom_lieu AS nomLieu FROM lieu WHERE nom_lieu LIKE '%um';

2) SELECT nom_personnage FROM personnage INNER JOIN lieu ON personnage.id_lieu = lieu.id_lieu ORDER BY COUNT(*) DESC;

3) SELECT p.nom_personnage, nom_specialite, p.adresse_personnage, nom_lieu FROM personnage p 
INNER JOIN lieu l ON p.id_lieu = l.id_lieu
INNER JOIN specialite s ON p.id_specialite = s.id_specialite ORDER BY l, p.nom_personnage;

4) SELECT s.nom_specialite, COUNT(p.id_personnage) 
FROM specialite s 
LEFT OUTER JOIN personnage p ON s.id_specialite = p.id_specialite 
GROUP BY s.nom_specialite 
ORDER BY COUNT(p.id_personnage) DESC; 

5) SELECT b.nom_bataille, DATE_FORMAT(b.date_bataille, '%e/%m/%y'), l.nom_lieu FROM bataille
b INNER JOIN lieu l ON b.id_lieu = l.id_lieu ORDER BY date_bataille ASC;

6) SELECT p.nom_potion, SUM(c.qte * i.cout_ingredient) AS cout FROM potion p
LEFT OUTER JOIN composer c ON p.id_potion = c.id_potion
LEFT OUTER JOIN ingredient i ON c.id_ingredient = i.id_ingredient
GROUP BY p.nom_potion
HAVING cout <= 10 OR cout IS NULL
ORDER BY cout DESC

//Corrigé : 
SELECT
    p.nom_potion,
    SUM(i.cout_ingredient * c.qte) AS cout_potion
FROM
    potion p
    LEFT OUTER JOIN composer c
        ON c.id_potion = p.id_potion
    LEFT OUTER JOIN ingredient i
        ON c.id_ingredient = i.id_ingredient
GROUP BY
    p.id_potion
ORDER BY
    cout_potion DESC
;

//En plus : 
SELECT p.nom_potion, IFNULL(SUM(c.qte * i.cout_ingredient), 0) AS cout FROM potion p
LEFT OUTER JOIN composer c ON p.id_potion = c.id_potion
LEFT OUTER JOIN ingredient i ON c.id_ingredient = i.id_ingredient
GROUP BY p.nom_potion
ORDER BY cout DESC;

 

7) SELECT ANY_VALUE(i.nom_ingredient), SUM(c.qte * i.cout_ingredient) AS cout, ANY_VALUE(c.qte), p.nom_potion FROM ingredient i
INNER JOIN composer c ON i.id_ingredient = c.id_ingredient
INNER JOIN potion p ON c.id_potion = p.id_potion
WHERE p.nom_potion = 'Santé'
GROUP BY i.nom_ingredient

//Prof : 
SELECT i.nom_ingredient, SUM(i.cout_ingredient*c.qte) AS cout_ingredient 
FROM potion p, composer c, ingredient i 
WHERE p.id_potion = c.id_potion 
AND c.id_ingredient = i.id_ingredient 
AND p.nom_potion = 'Santé' 
GROUP BY i.id_ingredient

8) SELECT p.nom_personnage, SUM(pc.qte) AS nb_casques 
FROM personnage p, bataille b, prendre_casque pc 
WHERE p.id_personnage = pc.id_personnage 
AND pc.id_bataille = b.id_bataille 
AND b.nom_bataille = 'Bataille du village gaulois' 
GROUP BY p.id_personnage 
HAVING nb_casques >= ALL( 
SELECT SUM(pc.qte) 
             FROM prendre_casque pc, bataille b 
             WHERE b.id_bataille = pc.id_bataille 
             AND b.nom_bataille = 'Bataille du village gaulois' 
             GROUP BY pc.id_personnage 
) 

9) SELECT p.nom_personnage, SUM(b.dose_boire) AS bu FROM boire b
INNER JOIN personnage p ON b.id_personnage = p.id_personnage
GROUP BY p.nom_personnage
HAVING bu
ORDER BY bu DESC

10) SELECT ANY_VALUE(b.nom_bataille), SUM(pc.qte) AS cp FROM prendre_casque pc
INNER JOIN bataille b ON pc.id_bataille = b.id_bataille
GROUP BY b.nom_bataille
HAVING cp
ORDER BY cp DESC
LIMIT 1

//Corrigé : 
SELECT b.nom_bataille, SUM(pc.qte) AS cp FROM prendre_casque pc
INNER JOIN bataille b ON pc.id_bataille = b.id_bataille
GROUP BY b.nom_bataille
HAVING cp >= ALL(   
        SELECT SUM(pc.qte) 
        FROM prendre_casque pc, bataille b 
        WHERE b.id_bataille = pc.id_bataille 
        GROUP BY b.nom_bataille 
) 


11) SELECT COUNT(tc.type_casque), c.cout_casque FROM type_casque tc
INNER JOIN casque c ON tc.id_type_casque = c.id_type_casque
ORDER BY tc.type_casque, c.cout_casque DESC;


12) SELECT p.nom_potion FROM potion p
INNER JOIN composer c ON p.id_potion = c.id_potion
INNER JOIN ingredient i ON c.id_ingredient = i.id_ingredient
WHERE i.nom_ingredient = 'Poisson frais';

13) SELECT COUNT(p.id_personnage) AS nb, l.nom_lieu AS ville 
FROM personnage p, lieu l
WHERE l.nom_lieu != 'Village gaulois' AND l.id_lieu = p.id_lieu
GROUP BY p.id_lieu
HAVING nb >= ALL(
	SELECT COUNT(p.id_personnage) AS nb
	FROM personnage p, lieu l
	WHERE l.nom_lieu != 'Village gaulois' AND l.id_lieu = p.id_lieu
	GROUP BY p.id_lieu
)

14) SELECT p.nom_personnage FROM personnage p
INNER JOIN boire b ON p.id_personnage = b.id_personnage
WHERE b.dose_boire = 0 OR b.dose_boire IS NULL;

15) SELECT nom_personnage FROM personnage p
SELECT id_potion AS potionID FROM potion
LEFT JOIN autoriser_boire ab
ON ab.id_personnage=p.id_personnage
WHERE ab.id_personnage IS NULL AND ab.id_potion = id_potion AND nom_potion = 'Magique'

//Corrigé : 
SELECT p.nom_personnage FROM personnage p
WHERE p.id_personnage NOT IN (
	SELECT id_personnage
	FROM autoriser_boire a, potion pt
	WHERE pt.id_potion = a.id_potion AND pt.nom_potion = 'Magique'
)


B) Modifier

a) INSERT INTO personnage (nom_personnage, adresse_personnage, id_lieu, id_specialite)
VALUES ('Champdeblix', 'ferme Hantassion', (SELECT l.id_lieu AS lieu_id FROM lieu l WHERE l.nom_lieu = 'Rotomagus'), (SELECT s.id_specialite FROM specialite s WHERE s.nom_specialite = 'Agriculteur'));

b) INSERT INTO autoriser_boire (id_potion, id_personnage) 
VALUES ((SELECT p.id_personnage FROM personnage p WHERE p.nom_personnage = 'Bonemine'), (SELECT po.id_potion FROM potion po WHERE nom_potion = 'Magique'));

c) DELETE FROM casque c
WHERE c.id_casque NOT IN 
(SELECT id_casque FROM prendre_casque, type_casque
WHERE c.id_casque)

//Corrigé : 

DELETE FROM casque 
WHERE id_type_casque = ( 
    SELECT id_type_casque  
    FROM type_casque  
    WHERE nom_type_casque = 'Grec' 
) 
AND id_casque NOT IN ( 
    SELECT pc.id_casque  
    FROM prendre_casque pc 
) 

d) UPDATE personnage SET adresse_personnage = 'prison', id_lieu = (SELECT l.id_lieu FROM lieu l WHERE nom_lieu = 'Condate')
WHERE nom_personnage = 'Zérozérosix';

e)DELETE FROM composer WHERE id_ingredient = (SELECT i.id_ingredient FROM ingredient i WHERE nom_ingredient = 'persil') 
AND id_potion = (SELECT p.id_potion FROM potion p WHERE nom_potion = 'Soupe');

f) UPDATE prendre_casque SET id_casque = 
(SELECT c.id_casque FROM casque c WHERE id_type_casque = (SELECT tc.id_type_casque FROM type_casque tc WHERE nom_type_casque = 'Weisenau')), id_type_casque = (SELECT tc.id_type_casque FROM type_casque tc WHERE nom_type_casque = 'Weisenau')
WHERE id_personnage = (SELECT p.id_personnage FROM personnage p WHERE nom_personnage = 'Obélix');